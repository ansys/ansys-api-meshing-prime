name: Ansys Prime Server gRPC API CI

on:
  pull_request:
    branches:
      - main

  push:
    tags:
      - "v*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke:
    name: Build package

    strategy:
      fail-fast: false
      matrix: [ windows-latest, ubuntu-latest ]
      python-version: [ "3.7", "3.8", "3.9" ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Build api package
        run: |
          pip install .

      - name: Test package
        run: |
          python -c "import ansys.api.meshing.prime; print('Succesfully imported ansys.api.meshing.prime')"
          python -c "from ansys.api.meshing.prime import __version__; print(__version__)"

  validation:
    name: Package validation
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Build and Install Ansys Prime Server API package
          run: |
            pip install build
            python -m build .

      - name: Check package
          run: |
            pip install twine
            twine check dist/*

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: ansys-api-meshing-prime
          path: dist/
          retention-days: 7
  
  release:
    name: Release the API package
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [ smoke, validation ]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      # - name: Upload to Private PyPi
      #   run: |
      #     pip install twine
      #     python -m twine upload --skip-existing ./**/*.whl
      #   env:
      #     TWINE_USERNAME: PAT
      #     TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
      #     TWINE_REPOSITORY_URL: https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload

      # - name: Upload to Public PyPi
      #   run: |
      #     pip install twine
      #     twine upload --skip-existing ./**/*.whl
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            ./**/*.whl
            ./**/*.tar.gz
